#include "WiFi.h"
#include "HTTPClient.h"
#include <ArduinoJson.h>
#include "esp_camera.h" // Include the camera library

// === CONFIGURACI√ìN ===

const char* ssid = "";
const char* password = "";
const String BOT_TOKEN = ""; // Tu token
const String CHAT_ID = ""; // Tu chat ID

const int pirPin = 13;        // Pin del sensor PIR
const int alarmPin = 4;       // Pin para activar la alarma (conectado a la base del transistor)
bool motionDetected = false;

// === CONFIGURACI√ìN DE LA C√ÅMARA ===
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// === FUNCION DE CODIFICACION URL ===
String urlEncodeUTF8(String str) {
  String encoded = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encoded += '+';
    } else if (isalnum(c)) {
      encoded += c;
    } else {
      code1 = (c & 0xf) + '0';
      code0 = ((c >> 4) & 0xf);
      code0 += code0 > 9 ? 'A' - 10 : '0';
      encoded += '%';
      encoded += code0;
      encoded += code1;
    }
  }
  return encoded;
}

// === URL TELEGRAM ===
String telegramAlertURL(String message) {
  String encodedMessage = urlEncodeUTF8(message);
  return "https://api.telegram.org/bot" + BOT_TOKEN + "/sendMessage?chat_id=" + CHAT_ID + "&text=" + encodedMessage;
}

// === ENV√çO DE MENSAJE (TEXTO) ===
void sendTelegramAlert(String msg) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = telegramAlertURL(msg);

    http.begin(url);
    int httpCode = http.GET();

    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
        Serial.println("‚úÖ Mensaje de texto enviado a Telegram");
      } else {
        Serial.println("‚ùå Error HTTP al enviar texto: " + String(httpCode));
      }
    } else {
      Serial.println("üö´ Error al conectar con Telegram (texto): " + String(httpCode));
    }
    http.end();
  } else {
    Serial.println("‚ö†Ô∏è Sin conexi√≥n WiFi para enviar texto");
  }
}

// === INICIALIZAR C√ÅMARA ===
bool initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG; // Usar JPEG para la foto

  // Ajustar la resoluci√≥n seg√∫n tus necesidades (UXGA, SVGA, XGA, HD, VGA, CIF, QVGA, QQVGA)
  config.frame_size = FRAMESIZE_SVGA; // 800x600 pixels, buen equilibrio
  config.jpeg_quality = 10;           // 0-63, 0 mejor calidad, 63 peor calidad
  config.fb_count = 1;

  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("‚ùå Fallo al inicializar la c√°mara: 0x%x\n", err);
    return false;
  }
  Serial.println("‚úÖ C√°mara inicializada.");
  return true;
}

// === ENVIAR FOTO A TELEGRAM (Revisado con Content-Length) ===
void sendPhotoToTelegram() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è Sin conexi√≥n WiFi para enviar la foto");
    return;
  }

  camera_fb_t *fb = NULL;
  fb = esp_camera_fb_get(); // Capturar frame
  if (!fb) {
    Serial.println("‚ùå Fallo al capturar la foto");
    return;
  }

  Serial.println("üì∏ Foto capturada. Enviando a Telegram...");

  HTTPClient http;
  String url = "https://api.telegram.org/bot" + BOT_TOKEN + "/sendPhoto";
  http.begin(url);

  String boundary = "------WebKitFormBoundary" + String(millis());
  String contentType = "multipart/form-data; boundary=" + boundary;

  // Construimos el cuerpo multipart para chat_id y la parte inicial de la foto
  String headerPart1 = "--" + boundary + "\r\n";
  headerPart1 += "Content-Disposition: form-data; name=\"chat_id\"\r\n\r\n" + CHAT_ID + "\r\n";
  headerPart1 += "--" + boundary + "\r\n";
  headerPart1 += "Content-Disposition: form-data; name=\"photo\"; filename=\"esp32cam.jpg\"\r\n";
  headerPart1 += "Content-Type: image/jpeg\r\n\r\n"; // Fin del encabezado de la parte de la foto

  String tailPart = "\r\n--" + boundary + "--\r\n"; // Pie del cuerpo multipart

  // Calcular la longitud total del contenido
  size_t totalLength = headerPart1.length() + fb->len + tailPart.length();

  http.addHeader("Content-Type", contentType);
  http.addHeader("Content-Length", String(totalLength)); // IMPORTANT: Set Content-Length

  // Begin the actual request with calculated length
  int httpCode = http.sendRequest("POST", (uint8_t*)NULL, 0); // Start the POST request

  if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
          Serial.println("‚úÖ Petici√≥n POST iniciada OK. Enviando datos...");
          WiFiClient *client = http.getStreamPtr();
          client->print(headerPart1);
          size_t bytesWritten = client->write(fb->buf, fb->len);
          Serial.printf("Bytes de imagen escritos: %d de %d\n", bytesWritten, fb->len);
          client->print(tailPart);
          Serial.println("Datos multipart escritos.");

          // Read response after sending all data
          String payload = http.getString();
          Serial.println("Respuesta de Telegram: ");
          Serial.println(payload);

          // Check if Telegram confirmed success in the payload
          if (payload.indexOf("\"ok\":true") != -1) {
              Serial.println("‚úÖ Foto enviada a Telegram con √©xito.");
          } else {
              Serial.println("‚ùå Telegram report√≥ un error al procesar la foto.");
          }

      } else {
          Serial.println("‚ùå Error HTTP al iniciar POST para foto: " + String(httpCode));
          Serial.println(http.getString()); // Imprimir respuesta de error de Telegram
      }
  } else {
      Serial.println("üö´ Error al conectar con Telegram (foto): " + String(httpCode));
  }

  esp_camera_fb_return(fb); // Liberar el buffer de la c√°mara
  http.end(); // Cerrar la conexi√≥n
}


// === SETUP ===
void setup() {
  pinMode(pirPin, INPUT);
  pinMode(alarmPin, OUTPUT);
  digitalWrite(alarmPin, LOW); // Iniciar apagado

  Serial.begin(115200);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado a WiFi");
  Serial.println("IP asignada: " + WiFi.localIP().toString());

  // Inicializar la c√°mara
  if (!initCamera()) {
    Serial.println("üö® Fallo al iniciar la c√°mara. Reiniciando en 5 segundos...");
    delay(5000);
    ESP.restart();
  }
}

// === LOOP ===
void loop() {
  int pirValue = digitalRead(pirPin);

  if (pirValue == HIGH && !motionDetected) {
    Serial.println("üö® Movimiento detectado!");

    // Activamos la alarma f√≠sica
    digitalWrite(alarmPin, HIGH);
    Serial.println("üîä Alarma activada");

    // Enviamos mensaje de texto a Telegram
    sendTelegramAlert("¬°Alerta de movimiento detectado!");

    // Tomar y enviar foto a Telegram
    sendPhotoToTelegram();

    motionDetected = true;

    // Opcional: esperar antes de enviar otro mensaje y mantener la alarma activa
    delay(5000); // Dar tiempo para que se env√≠e la foto, luego apagar alarma
    digitalWrite(alarmPin, LOW); // Apagar alarma despu√©s de tiempo
    Serial.println("üîä Alarma desactivada");

    // Considerar un tiempo de "enfriamiento" para el sensor PIR
    // para evitar m√∫ltiples detecciones r√°pidas.
    delay(10000); // 10 segundos de espera antes de permitir nueva detecci√≥n
  }

  if (pirValue == LOW && motionDetected) {
    Serial.println("No hay movimiento.");
    motionDetected = false;
  }

  delay(100); // Anti-rebote del sensor
}
